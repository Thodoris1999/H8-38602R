# H8/300 instruction set
# reference: https://www.classes.cs.uchicago.edu/archive/2006/winter/23000-1/docs/h8300.pdf

# How is this implemented?!
define pcodeop bcdAdjust;

macro resflags(result) {
	Z = (result == 0);
	N = (result s< 0);
}

macro movflags(result) {
	Z = (result == 0);
	N = (result s< 0);
	V = 0;
}

macro addflags(operand1, operand2) {
	local AFmask = -1 >> 4;
	H = (((operand1 & AFmask) + (operand2 & AFmask)) & (AFmask + 1)) != 0;
	V = scarry(operand1, operand2);
	C = carry(operand1, operand2);
}

macro subflags3(operand1,operand2) {
  H = (operand1 & 0x0F) < (operand2 & 0x0F);
  V = sborrow(operand1,operand2);
  C = operand1 < operand2;
}

macro subflags11(operand1,operand2) {
  H = (operand1 & 0x0FFF) < (operand2 & 0x0FFF);
  V = sborrow(operand1,operand2);
  C = operand1 < operand2;
}

# maps register names to fields
attach variables [ reg8hi reg8lo ] [ r0h r1h r2h r3h r4h r5h r6h r7h r0l r1l r2l r3l r4l r5l r6l r7l ];

# H8/300 instructions

addr8: "@"imm8 is imm8 { export *:2 imm8; }
absaddr8.b: "@"tmp is imm8 [ tmp = 0xFF00 + imm8; ] { export *:1 tmp; }
absaddr16.b: "@"imm16 is b15=1 & imm16 { export *:1 imm16; }
absaddr16.b: "@"imm16 is b15=0 & imm16 { export *:1 imm16; }
absaddr16.w: "@"imm16 is b15=1 & imm16 { export *:2 imm16; }
absaddr16.w: "@"imm16 is b15=0 & imm16 { export *:2 imm16; }
pcoff8: reloc is simm8 [ reloc=inst_next+simm8; ] { export *:2 reloc; }

op_imm8: "#"^imm8 is imm8 { export *[const]:1 imm8; }
op_imm16: "#"^imm16 is imm16 { export *[const]:2 imm16; }

src_r8: reg8hi is reg8hi { export reg8hi; }
dst_r8: reg8lo is reg8lo { export reg8lo; }

src_r16: reg16hi is b7=0 & reg16hi { export reg16hi; }
dst_r16: reg16lo is b3=0 & reg16lo { export reg16lo; }
src_r3b1: reg32hi is b7=1 & reg32hi { export reg32hi; }
src_r3b: reg32hi is b7=0 & reg32hi { export reg32hi; }
dst_r3b: reg3lo is b3=0 & reg3lo { export reg3lo; }

cc: "ra" is lnyb=0 { export 1:1; }
cc: "rn" is lnyb=1 { export 0:1; }
cc: "hi" is lnyb=2 { tmp:1 = !(C||Z); export tmp; }
cc: "ls" is lnyb=3 { tmp:1 = C||Z; export tmp; }
cc: "cc" is lnyb=4 { tmp:1 = !C; export tmp; }
cc: "cs" is lnyb=5 { tmp:1 = C; export tmp; }
cc: "ne" is lnyb=6 { tmp:1 = !Z; export tmp; }
cc: "eq" is lnyb=7 { tmp:1 = Z; export tmp; }
cc: "vc" is lnyb=8 { tmp:1 = !V; export tmp; }
cc: "vs" is lnyb=9 { tmp:1 = V; export tmp; }
cc: "pl" is lnyb=10 { tmp:1 = !N; export tmp; }
cc: "mi" is lnyb=11 { tmp:1 = N; export tmp; }
cc: "ge" is lnyb=12 { tmp:1 = (V==N); export tmp; }
cc: "lt" is lnyb=13 { tmp:1 = (V!=N); export tmp; }
cc: "gt" is lnyb=14 { tmp:1 = !Z&&(V==N); export tmp; }
cc: "le" is lnyb=15 { tmp:1 = Z||(V!=N); export tmp; }


:add.b op_imm8,dst_r8 is op4=0x8 & dst_r8; op_imm8 {
	addflags(dst_r8, op_imm8);
	dst_r8 = dst_r8 + op_imm8;
	resflags(dst_r8);
}
:add.b src_r8,dst_r8 is op8=0x08; src_r8 & dst_r8 {
	addflags(dst_r8, src_r8);
	dst_r8 = dst_r8 + src_r8;
	resflags(dst_r8);
}
:add.w src_r16,dst_r16 is op8=0x09; src_r16 & dst_r16 {
	addflags(dst_r16, src_r16);
	dst_r16 = dst_r16 + src_r16;
	resflags(dst_r16);
}
:adds "#"1,dst_r3b is op8=0x0B; op4=0 & dst_r3b { dst_r3b = dst_r3b + 1; }
:adds "#"2,dst_r3b is op8=0x0B; op4=8 & dst_r3b { dst_r3b = dst_r3b + 2; }
:addx op_imm8,dst_r8 is op4=0x9 & dst_r8; op_imm8 {
	local srcop = op_imm8 + C;
	addflags(dst_r8, srcop);
	dst_r8 = dst_r8 + srcop;
	resflags(dst_r8);
}
:addx src_r8,dst_r8 is op8=0x0E; src_r8 & dst_r8 {
	local srcop = src_r8 + C;
	addflags(dst_r8, srcop);
	dst_r8 = dst_r8 + srcop;
	resflags(dst_r8);
}
:and.b op_imm8,dst_r8 is op4=0xE & dst_r8; op_imm8 {
	dst_r8 = dst_r8 & op_imm8;
	movflags(dst_r8);
}
:and.b src_r8,dst_r8 is op8=0x16; src_r8 & dst_r8 {
	dst_r8 = dst_r8 & src_r8;
	movflags(dst_r8);
}
:andc op_imm8,"ccr" is op8=0x06; op_imm8 { local ccr:1; ccr_r(ccr); ccr_w(ccr & op_imm8); }

:b^cc pcoff8 is op4=4 & cc; pcoff8 {
	if (cc) goto pcoff8;
}

:band "#"bit,dst_r8 is op8=0x76; invert=0 & bit & dst_r8 {
	local rbit = (dst_r8 >> bit) & 1;
	C = C & rbit;
}
:band "#"bit,regind_src.b is op8=0x7C; regind_src.b & lnyb=0; op8=0x76; invert=0 & bit & lnyb=0 { 
	C = C & ((regind_src.b) >> bit);
}
:band "#"bit,absaddr8.b is op8=0x7E; absaddr8.b; op8=0x76; invert=0 & bit & lnyb=0 {
	C = C & (absaddr8.b >> bit);
}
:bclr "#"bit,dst_r8 is op8=0x72; invert=0 & bit & dst_r8 {
	dst_r8 = dst_r8 & ~(1 << bit);
}
:bclr "#"bit,regind_src.b is op8=0x7D; regind_src.b & lnyb=0; op8=0x72; invert=0 & bit & lnyb=0 {
	regind_src.b = regind_src.b & ~(1 << bit);
}
:bclr "#"bit,absaddr8.b is op8=0x7F; absaddr8.b; op8=0x72; invert=0 & bit & lnyb=0 {
	absaddr8.b = absaddr8.b &  ~(1 << bit);
}
:bclr src_r8,dst_r8 is op8=0x62; src_r8 & dst_r8 {
	dst_r8 = dst_r8 & ~(1 << (src_r8 & 7));
}
:bclr src_r8,regind_src.b is op8=0x7D; regind_src.b & lnyb=0; op8=0x62; src_r8 & lnyb=0 {
	regind_src.b = regind_src.b & ~(1 << (src_r8 & 7));
}
:bclr src_r8,absaddr8.b is op8=0x7F; absaddr8.b; op8=0x62; src_r8 & lnyb=0 {
	absaddr8.b = absaddr8.b &  ~(1 << (src_r8 & 7));
}
:biand "#"bit,dst_r8 is op8=0x76; invert=1 & bit & dst_r8 {
	local rbit = ~((dst_r8 >> bit) & 1);
	C = C & rbit;
}
:biand "#"bit,regind_src.b is op8=0x7C; regind_src.b & lnyb=0; op8=0x76; invert=1 & bit & lnyb=0 { 
	C = C & ~(regind_src.b >> bit);
}
:biand "#"bit,absaddr8.b is op8=0x7E; absaddr8.b; op8=0x76; invert=1 & bit & lnyb=0 {
	C = C & ~(absaddr8.b >> bit);
}
:bild "#"bit,dst_r8 is op8=0x77; invert=1 & bit & dst_r8 {
	C = ~((dst_r8 >> bit) & 1);
}
:bild "#"bit,regind_src.b is op8=0x7C; regind_src.b & lnyb=0; op8=0x77; invert=1 & bit & lnyb=0 { 
	C = ~(regind_src.b >> bit);
}
:bild "#"bit,absaddr8.b is op8=0x7E; absaddr8.b; op8=0x77; invert=1 & bit & lnyb=0 {
	C = ~(absaddr8.b >> bit);
}
:bior "#"bit,dst_r8 is op8=0x74; invert=1 & bit & dst_r8 {
	local rbit = ~((dst_r8 >> bit) & 1);
	C = C | rbit;
}
:bior "#"bit,regind_src.b is op8=0x7C; regind_src.b & lnyb=0; op8=0x74; invert=1 & bit & lnyb=0 { 
	C = C | ~(regind_src.b >> bit);
}
:bior "#"bit,absaddr8.b is op8=0x7E; absaddr8.b; op8=0x74; invert=1 & bit & lnyb=0 {
	C = C | ~(absaddr8.b >> bit);
}
:bist "#"bit,dst_r8 is op8=0x67; invert=1 & bit & dst_r8 {
	local masked = dst_r8 & ~(1 << bit);
	dst_r8 = masked | (~C << bit);
}
:bist "#"bit,regind_src.b is op8=0x7D; regind_src.b & lnyb=0; op8=0x67; invert=1 & bit & lnyb=0 {
	local masked = regind_src.b & ~(1 << bit);
	regind_src.b = masked | (~C << bit);
}
:bist "#"bit,absaddr8.b is op8=0x7F; absaddr8.b; op8=0x67; invert=1 & bit & lnyb=0 {
	local masked = absaddr8.b &  ~(1 << bit);
	absaddr8.b = masked | (~C << bit);
}
:bixor "#"bit,dst_r8 is op8=0x75; invert=1 & bit & dst_r8 {
	local rbit = ~((dst_r8 >> bit) & 1);
	C = C ^ rbit;
}
:bixor "#"bit,regind_src.b is op8=0x7C; regind_src.b & lnyb=0; op8=0x75; invert=1 & bit & lnyb=0 { 
	C = C ^ ~(regind_src.b >> bit);
}
:bixor "#"bit,absaddr8.b is op8=0x7E; absaddr8.b; op8=0x75; invert=1 & bit & lnyb=0 {
	C = C ^ ~(absaddr8.b >> bit);
}
:bld "#"bit,dst_r8 is op8=0x77; invert=0 & bit & dst_r8 {
	C = ((dst_r8 >> bit) & 1);
}
:bld "#"bit,regind_src.b is op8=0x7C; regind_src.b & lnyb=0; op8=0x77; invert=0 & bit & lnyb=0 { 
	C = (regind_src.b >> bit);
}
:bld "#"bit,absaddr8.b is op8=0x7E; absaddr8.b; op8=0x77; invert=0 & bit & lnyb=0 {
	C = (absaddr8.b >> bit);
}
:bnot "#"bit,dst_r8 is op8=0x71; invert=0 & bit & dst_r8 {
	dst_r8 = dst_r8 ^ (1<<bit);
}
:bnot "#"bit,regind_src.b is op8=0x7D; regind_src.b & lnyb=0; op8=0x71; invert=0 & bit & lnyb=0 {
	regind_src.b = regind_src.b ^ (1 << bit);
}
:bnot "#"bit,absaddr8.b is op8=0x7F; absaddr8.b; op8=0x71; invert=0 & bit & lnyb=0 {
	absaddr8.b = absaddr8.b ^ (1<<bit);
}
:bnot src_r8,dst_r8 is op8=0x61; src_r8 & dst_r8 {
	dst_r8 = dst_r8 ^ (1<<(src_r8&7));
}
:bnot src_r8,regind_src.b is op8=0x7D; regind_src.b & lnyb=0; op8=0x61; src_r8 & lnyb=0 {
	regind_src.b = regind_src.b ^ (1<<(src_r8&7));
}
:bnot src_r8,absaddr8.b is op8=0x7F; absaddr8.b; op8=0x61; src_r8 & lnyb=0 {
	absaddr8.b = absaddr8.b ^ (1<<(src_r8&7));
}
:bor "#"bit,dst_r8 is op8=0x74; invert=0 & bit & dst_r8 {
	local rbit = ((dst_r8 >> bit) & 1);
	C = C | rbit;
}
:bor "#"bit,regind_src.b is op8=0x7C; regind_src.b & lnyb=0; op8=0x74; invert=0 & bit & lnyb=0 { 
	C = C | (regind_src.b >> bit);
}
:bor "#"bit,absaddr8.b is op8=0x7E; absaddr8.b; op8=0x74; invert=0 & bit & lnyb=0 {
	C = C | (absaddr8.b >> bit);
}
:bset "#"bit,dst_r8 is op8=0x70; invert=0 & bit & dst_r8 {
	dst_r8 = dst_r8 | (1 << bit);
}
:bset "#"bit,regind_src.b is op8=0x7D; regind_src.b & lnyb=0; op8=0x70; invert=0 & bit & lnyb=0 {
	regind_src.b = regind_src.b | (1 << bit);
}
:bset "#"bit,absaddr8.b is op8=0x7F; absaddr8.b; op8=0x70; invert=0 & bit & lnyb=0 {
	absaddr8.b = absaddr8.b | (1 << bit);
}
:bset src_r8,dst_r8 is op8=0x60; src_r8 & dst_r8 {
	dst_r8 = dst_r8 | (1 << (src_r8 & 7));
}
:bset src_r8,regind_src.b is op8=0x7D; regind_src.b & lnyb=0; op8=0x60; src_r8 & lnyb=0 {
	regind_src.b = regind_src.b | (1 << (src_r8 & 7));
}
:bset src_r8,absaddr8.b is op8=0x7F; absaddr8.b; op8=0x60; src_r8 & lnyb=0 {
	absaddr8.b = absaddr8.b | (1 << (src_r8 & 7));
}
:bst "#"bit,dst_r8 is op8=0x67; invert=0 & bit & dst_r8 {
	local masked = dst_r8 & ~(1 << bit);
	dst_r8 = masked | (C << bit);
}
:bst "#"bit,regind_src.b is op8=0x7D; regind_src.b & lnyb=0; op8=0x67; invert=0 & bit & lnyb=0 {
	local masked = regind_src.b & ~(1 << bit);
	regind_src.b = masked | (C << bit);
}
:bst "#"bit,absaddr8.b is op8=0x7F; absaddr8.b; op8=0x67; invert=0 & bit & lnyb=0 {
	local masked = absaddr8.b &  ~(1 << bit);
	absaddr8.b = masked | (C << bit);
}
:btst "#"bit,dst_r8 is op8=0x73; invert=0 & bit & dst_r8 {
	Z = (dst_r8 & 1<<bit) == 0;
}
:btst "#"bit,regind_src.b is op8=0x7C; regind_src.b & lnyb=0; op8=0x73; invert=0 & bit & lnyb=0 {
	Z = (regind_src.b & 1<<bit) == 0;
}
:btst "#"bit,absaddr8.b is op8=0x7E; absaddr8.b; op8=0x73; invert=0 & bit & lnyb=0 {
	Z = (absaddr8.b & 1<<bit) == 0;
}
:btst src_r8,dst_r8 is op8=0x63; src_r8 & dst_r8 {
	Z = (dst_r8 & 1<<src_r8) == 0;
}
:btst src_r8,regind_src.b is op8=0x7C; regind_src.b & lnyb=0; op8=0x63; src_r8 & lnyb=0 {
	Z = (regind_src.b & 1<<src_r8) == 0;
}
:btst src_r8,absaddr8.b is op8=0x7E; absaddr8.b; op8=0x63; src_r8 & lnyb=0 {
	Z = (absaddr8.b & 1<<src_r8) == 0;
}
:bxor "#"bit,dst_r8 is op8=0x75; invert=0 & bit & dst_r8 {
	local rbit = ((dst_r8 >> bit) & 1);
	C = C ^ rbit;
}
:bxor "#"bit,regind_src.b is op8=0x7C; regind_src.b & lnyb=0; op8=0x75; invert=0 & bit & lnyb=0 { 
	C = C ^ (regind_src.b >> bit) & 1;
}
:bxor "#"bit,absaddr8.b is op8=0x7E; absaddr8.b; op8=0x75; invert=0 & bit & lnyb=0 {
	C = C ^ (absaddr8.b >> bit) & 1;
}

:bsr pcoff8 is op8=0x55; pcoff8 {
	pushpc();
	call pcoff8;
}

:cmp.b op_imm8,dst_r8 is op4=0xA & dst_r8; op_imm8 {
	subflags3(dst_r8, op_imm8);
	resflags(dst_r8-op_imm8);
}
:cmp.b src_r8,dst_r8 is op8=0x1C; src_r8 & dst_r8 {
	subflags3(dst_r8, src_r8);
	resflags(dst_r8-src_r8);
}
:cmp.w src_r16,dst_r16 is op8=0x1D; src_r16 & dst_r16 {
	subflags11(dst_r16, src_r16);
	resflags(dst_r16-src_r16);
}
:daa dst_r8 is op8=0x0F; hnyb=0 & dst_r8 {
	#local ln:2 = zext(dst_r8[0,4]);
	#local un:2 = zext(dst_r8[4,4]);
	bcdAdjust(dst_r8);
  # TODO
} 
:das dst_r8 is op8=0x1F; hnyb=0 & dst_r8 {
	#local ln:2 = zext(dst_r8[0,4]);
	#local un:2 = zext(dst_r8[4,4]);
	bcdAdjust(dst_r8);
  # TODO
}
:dec.b dst_r8 is op8=0x1A; hnyb=0 & dst_r8 {
	V = dst_r8 == 0x80;
	dst_r8 = dst_r8 - 1;
	resflags(dst_r8);
}
:divxu.b src_r8,dst_r16 is op8=0x51; src_r8 & dst_r16 {
	local rem = dst_r16 % sext(src_r8);
	local quot = dst_r16 / sext(src_r8);
	dst_r16 = rem << 8 | quot;
	resflags(src_r8);
}
:eepmov.b is op16=0x7B5C; op16=0x598F {
	if (r4l != 0) goto <end>;
	<nextbyte>
	local src:2 = r5;
	local dst:2 = r6;
	*:1 dst = *:1 src;
#	*:1 r6 = *:1 r5;
	r5 = r5 + 1;
	r6 = r6 + 1;
	r4l = r4l - 1;
	if (r4l != 0) goto <nextbyte>;
	<end>
}
:inc.b dst_r8 is op8=0x0A; hnyb=0 & dst_r8 {
	V = dst_r8 == 0x7F;
	dst_r8 = dst_r8 + 1;
	resflags(dst_r8);
}

:jmp regind_src.l is op8=0x59; regind_src.l & lnyb=0 {
	goto [regind_src.l];
}
@ifndef ADVANCED
:jmp addr16 is op8=0x5A; op8=0; addr16 {
	goto addr16;
}
@endif
:jmp @addr8 is op8=0x5B; addr8 {
	goto addr8;
}
:jsr regind_src.l is op8=0x5D; regind_src.l & lnyb=0 {
	pushpc();
	call [regind_src.l];
}

:ldc.b op_imm8,"ccr" is op8=0x07; op_imm8 { ccr_w(op_imm8); }
:ldc.b dst_r8,"ccr" is op8=0x03; hnyb=0 & dst_r8 { ccr_w(dst_r8); }
:mov.b src_r8,dst_r8 is op8=0x0C; src_r8 & dst_r8 { dst_r8 = src_r8; movflags(dst_r8); }
:mov.w src_r16,dst_r16 is op8=0x0D; src_r16 & dst_r16 { dst_r16 = src_r16; movflags(dst_r16); }
:mov.b op_imm8,dst_r8 is op4=0xF & dst_r8; op_imm8 { dst_r8 = op_imm8; movflags(dst_r8); }
:mov.b @src_r3b,dst_r8 is op8=0x68; src_r3b & dst_r8 { dst_r8 = *:1 src_r3b:2; movflags(dst_r8); }
:mov.b @(imm16,src_r3b),dst_r8 is op8=0x6E; src_r3b & dst_r8; imm16 { local tmp = src_r3b + imm16; dst_r8 = *:1 tmp:2; movflags(dst_r8); }
:mov.b @src_r3b+,dst_r8 is op8=0x6C; src_r3b & dst_r8 { dst_r8 = *:1 src_r3b:2; src_r3b = src_r3b + 1; movflags(dst_r8); }
:mov.b absaddr8.b,dst_r8 is op4=0x2 & dst_r8; absaddr8.b { dst_r8 = absaddr8.b; movflags(dst_r8); }
:mov.b absaddr16.b,dst_r8 is op8=0x6A; hnyb=0 & dst_r8; absaddr16.b { dst_r8 = absaddr16.b; movflags(dst_r8); }
:mov.w op_imm16,dst_r16 is op8=0x79; hnyb=0 & dst_r16; op_imm16 { dst_r16 = op_imm16; movflags(dst_r16); }
:mov.w @src_r3b,dst_r16 is op8=0x69; src_r3b & dst_r16 { dst_r16 = *:2 src_r3b:2; movflags(dst_r16); }
:mov.w @(imm16,src_r3b),dst_r16 is op8=0x6F; src_r3b & dst_r16; imm16 { local tmp = src_r3b + imm16; dst_r16 = *:2 tmp:2; movflags(dst_r16); }
:mov.w @src_r3b+,dst_r16 is op8=0x6D; src_r3b & dst_r16 { dst_r16 = *:2 src_r3b:2; src_r3b = src_r3b + 2; movflags(dst_r16); }
:mov.w absaddr16.w,dst_r16 is op8=0x6B; hnyb=0 & dst_r16; absaddr16.w { dst_r16 = absaddr16.w; movflags(dst_r16); }
:mov.b dst_r8,@src_r3b1 is op8=0x68; src_r3b1 & dst_r8 { *:1 src_r3b1:2 = dst_r8; movflags(dst_r8); }
:mov.b dst_r8,@(imm16,src_r3b1) is op8=0x6E; src_r3b1 & dst_r8; imm16 { local tmp = src_r3b1 + imm16; *:1 tmp:2 = dst_r8; movflags(dst_r8); }
:mov.b dst_r8,@-src_r3b1 is op8=0x6C; src_r3b1 & dst_r8 { src_r3b1 = src_r3b1 - 1; *:1 src_r3b1:2 = dst_r8; movflags(dst_r8); }
:mov.b dst_r8,absaddr8.b is op4=0x3 & dst_r8; absaddr8.b { absaddr8.b = dst_r8; movflags(dst_r8); }
:mov.b dst_r8,absaddr16.b is op8=0x6A; hnyb=8 & dst_r8; absaddr16.b { absaddr16.b = dst_r8; movflags(dst_r8); }
:mov.w dst_r16,@src_r3b1 is op8=0x69; src_r3b1 & dst_r16 { *:2 src_r3b1:2 = dst_r16; movflags(dst_r16); }
:mov.w dst_r16,@(imm16,src_r3b1) is op8=0x6F; src_r3b1 & dst_r16; imm16 { local tmp = src_r3b1 + imm16; *:2 tmp:2 = dst_r16; movflags(dst_r16); }
:mov.w dst_r16,@-src_r3b1 is op8=0x6D; src_r3b1 & dst_r16 { src_r3b1 = src_r3b1 - 2; *:2 src_r3b1:2 = dst_r16; movflags(dst_r16); }
:mov.w dst_r16,absaddr16.w is op8=0x6B; hnyb=8 & dst_r16; absaddr16.w { absaddr16.w = dst_r16; movflags(dst_r16); }
:movfpe absaddr16.b,dst_r8 is op8=0x6A; hnyb=4 & dst_r8; absaddr16.b { dst_r8 = absaddr16.b; movflags(dst_r8); }
:movtpe dst_r8,absaddr16.b is op8=0x6A; hnyb=0xC & dst_r8; absaddr16.b { absaddr16.b = dst_r8; movflags(dst_r8); }

:mulxu.b src_r8,dst_r16 is op8=0x50; src_r8 & dst_r16 { dst_r16 = (dst_r16 & 0xFF) * zext(src_r8); }
:neg.b dst_r8 is op8=0x17; op4=8 & dst_r8 { subflags3(0,dst_r8); dst_r8 = -dst_r8; resflags(dst_r8); }
:nop is op16=0 {}
:not.b dst_r8 is op8=0x17; op4=0 & dst_r8 { dst_r8 = ~dst_r8; movflags(dst_r8); }
:or.b op_imm8,dst_r8 is op4=0xC & dst_r8; op_imm8 {
	dst_r8 = dst_r8 | op_imm8;
	movflags(dst_r8);
}
:or.b src_r8,dst_r8 is op8=0x14; src_r8 & dst_r8 {
	dst_r8 = dst_r8 | src_r8;
	movflags(dst_r8);
}
:orc op_imm8,"ccr" is op8=0x04; op_imm8 { local ccr:1; ccr_r(ccr); ccr_w(ccr | op_imm8); }
:pop.w dst_r16 is op8=0x6D; op4=7 & dst_r16 {
  dst_r16 = *$(SP):2; $(SP) = $(SP)+2; movflags(dst_r16);
}
:push.w dst_r16 is op8=0x6D; op4=0xF & dst_r16 {
  $(SP) = $(SP)-2; *$(SP):2 = dst_r16; movflags(dst_r16);
}
:rotl.b dst_r8 is op8=0x12; op4=8 & dst_r8 {
	local c = dst_r8 >> 7;
	C = c;
	dst_r8 = (dst_r8 << 1) | c;
	movflags(dst_r8);
}
:rotr.b dst_r8 is op8=0x13; op4=8 & dst_r8 {
	local c = dst_r8 & 1;
	C = c;
	dst_r8 = (c << 7) | (dst_r8 >> 1);
	movflags(dst_r8);
}
:rotxl.b dst_r8 is op8=0x12; op4=0 & dst_r8 {
	local c = C;
	C = dst_r8 >> 7;
	dst_r8 = (dst_r8 << 1) | c;
	movflags(dst_r8);
}
:rotxr.b dst_r8 is op8=0x13; op4=0 & dst_r8 {
	local c = C;
	C = dst_r8 & 1;
	dst_r8 = (c << 7) | (dst_r8 >> 1);
	movflags(dst_r8);
}
:rte is op16=0x5670 {
  tmp = *:2 er7:2;
  er7 = er7 + 4;
  ccr_w(*:1 e7); # CCR stored in top byte of 32 bit word
  return [tmp];
}
:rts is op16=0x5470 {
  tmp = *:3 er7:2;
  er7 = er7 + 4;
  return [tmp:2];
}

:shal.b dst_r8 is op8=0x10; op4=8 & dst_r8 {
	V = dst_r8 >> 7;
	C = dst_r8 >> 7;
	dst_r8 = dst_r8 << 1;
	resflags(dst_r8);
}
:shar.b dst_r8 is op8=0x11; op4=8 & dst_r8 {
	C = dst_r8 & 1;
	dst_r8 = dst_r8 s>> 1;
	movflags(dst_r8);
}
:shll.b dst_r8 is op8=0x10; op4=0 & dst_r8 {
	C = dst_r8 >> 7;
	dst_r8 = dst_r8 << 1;
	movflags(dst_r8);
}
:shlr.b dst_r8 is op8=0x11; op4=0 & dst_r8 {
	C = dst_r8 & 1;
	dst_r8 = dst_r8 >> 1;
	movflags(dst_r8);
}
define pcodeop sleep;
:sleep is op16=0x0180 { sleep(); }
:stc.b "ccr",dst_r8 is op8=0x02; hnyb=0 & dst_r8 { ccr_r(dst_r8); }
:sub.b src_r8,dst_r8 is op8=0x18; src_r8 & dst_r8 { subflags3(dst_r8,src_r8); dst_r8 = dst_r8 - src_r8; resflags(dst_r8); }
:sub.w src_r16,dst_r16 is op8=0x19; src_r16 & dst_r16 {subflags11(dst_r16,src_r16); dst_r16 = dst_r16 - src_r16; resflags(dst_r16); }
:subs "#1",dst_r3b is op8=0x1B; op4=0 & dst_r3b { dst_r3b = dst_r3b - 1; }
:subs "#2",dst_r3b is op8=0x1B; op4=8 & dst_r3b { dst_r3b = dst_r3b - 2; }
:subx op_imm8,dst_r8 is op4=0xB & dst_r8; op_imm8 { local s = op_imm8 + C; subflags3(dst_r8,s); dst_r8 = dst_r8 - s; resflags(dst_r8); }
:subx src_r8,dst_r8 is op8=0x1E; src_r8 & dst_r8 { local s = src_r8 + C; subflags3(dst_r8,s); dst_r8 = dst_r8 - s; resflags(dst_r8); }
:xor.b op_imm8,dst_r8 is op4=0xD & dst_r8; op_imm8 { dst_r8 = dst_r8 ^ op_imm8; movflags(dst_r8); }
:xor.b src_r8,dst_r8 is op8=0x15; src_r8 & dst_r8 { dst_r8 = dst_r8 ^ src_r8; movflags(dst_r8); }
:xorc op_imm8,"ccr" is op8=0x05; op_imm8 { local ccr:1; ccr_r(ccr); ccr_w(ccr ^ op_imm8); }
