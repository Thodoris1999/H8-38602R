# H8/300H sleigh specification
# (reference: http://www.bitsavers.org/components/hitachi/h8/H8_300H_Programming_Manual.pdf)
#
# * Object code compatible with H8/300
# * More/larger registers
# * Expanded address space (advanced mode)
# * Extended addressing modes
# * More instructions

@define ADVANCED "1"

define endian=big;
define alignment=2;
define space ram type=ram_space size=2 default;
define space register type=register_space size=2;

# Overlapping names for general registers
define register offset=0 size=4 [er0 er1 er2 er3 er4 er5 er6 er7];
define register offset=0 size=2 [e0 r0 e1 r1 e2 r2 e3 r3 e4 r4 e5 r5 e6 r6 e7 r7];
define register offset=0 size=1 [_ _ r0h r0l _ _ r1h r1l _ _ r2h r2l _ _ r3h r3l _ _ r4h r4l _ _ r5h r5l _ _ r6h r6l _ _ r7h r7l];
define register offset=0x100 size=3 [pc];
# define register offset=0x200 size=1 [ccr];
define register offset=0x200 size=1 [C V Z N U H UI I];

# CCR Flags
#@define I_FLAG   "ccr[7,1]"
#@define UI_FLAG  "ccr[6,1]"
#@define H_FLAG   "ccr[5,1]"
#@define U_FLAG   "ccr[4,1]"
#@define N_FLAG   "ccr[3,1]"
#@define Z_FLAG   "ccr[2,1]"
#@define V_FLAG   "ccr[1,1]"
#@define C_FLAG   "ccr[0,1]"

@define I_FLAG   "I"
@define UI_FLAG  "UI"
@define H_FLAG   "H"
@define U_FLAG   "U"
@define N_FLAG   "N"
@define Z_FLAG   "Z"
@define V_FLAG   "V"
@define C_FLAG   "C"


@define SP "er7"

macro ccr_r(dst) {
	local ccr:1 = 0;
	ccr[7,1] = I;
	ccr[6,1] = UI;
	ccr[5,1] = H;
	ccr[4,1] = U;
	ccr[3,1] = N;
	ccr[2,1] = Z;
 	ccr[1,1] = V;
	ccr[0,1] = C;
	dst = ccr;
}

macro ccr_w(ccr)
{
	I = ccr[7,1];
	UI = ccr[6,1];
	H = ccr[5,1];
	U = ccr[4,1];
	N = ccr[3,1];
	Z = ccr[2,1];
 	V = ccr[1,1];
	C = ccr[0,1];
}

# PC is stored on stack in lower 24 bits of 32 bit word.
macro pushpc() {
#  er7 = er7-4; local addre = er7+1; *:3 addre:2 = &:3 inst_next;
}
macro poppc() {
#  local addre = er7+1; pc = *:3 addre:2; er7 = er7+4;
}
macro pushpcccr() { 
  pushpc();
  local ccr:1;
  ccr_r(ccr);
  *:1 e7 = ccr; # CCR stored in top byte of 32 bit word
}
macro poppcccr() { 
  ccr_w(*:1 e7); # CCR stored in top byte of 32 bit word
  poppc();
}

macro subflags27(operand1,operand2) {
  H = (operand1 & 0x0FFFFF) < (operand2 & 0x0FFFFF);
  V = sborrow(operand1,operand2);
  C = operand1 < operand2;
}

#@define asize "3"

define token hins1(8)
  xb7=(7,7)
  xb3=(3,3)
;

define token hins3(24)
  op24=(0,23)
  imm24=(0,23)
;

define token hins4(32)
  imm32=(0,31)
;

# object compatible with H8/300
@include "h8300tok.sinc"

attach variables [ reg16hi reg16lo ] [ r0 r1 r2 r3 r4 r5 r6 r7 e0 e1 e2 e3 e4 e5 e6 e7 ];
attach variables [ reg32hi reg32lo ] [ er0 er1 er2 er3 er4 er5 er6 er7 ];
attach variables [ reg3hi reg3lo ] [ er0 er1 er2 er3 er4 er5 er6 er7 ];

src_r16: reg16hi is reg16hi { export reg16hi; }
dst_r16: reg16lo is reg16lo { export reg16lo; }
regind_src.b: @reg16hi is b7=0 & reg16hi { export *:1 reg16hi; }

src_r32: reg32hi is b7=0 & reg32hi { export reg32hi; }
dst_r32: reg32lo is b3=0 & reg32lo { export reg32lo; }
src_r321: reg32hi is b7=1 & reg32hi { export reg32hi; }
pcoff16: reloc is simm16 [ reloc=inst_next+simm16; ] { export *:3 reloc; }
absaddr16.l: "@"imm16 is imm16 { export *:4 imm16; }
absaddr24.b: "@"imm24 is imm24 { export *:1 imm24; }
absaddr24.w: "@"imm24 is imm24 { export *:2 imm24; }
absaddr24.l: "@"imm24 is imm24 { export *:4 imm24; }
op_imm32: "#"imm32 is imm32 { export *[const]:4 imm32; }

# object compatible with H8/300
@include "h8300ins.sinc"

cc2: "ra" is hnyb=0 & lnyb=0 { export 1:1; }
cc2: "rn" is hnyb=1 & lnyb=0 { export 0:1; }
cc2: "hi" is hnyb=2 & lnyb=0 { tmp:1 = !(C || Z); export tmp; }
cc2: "ls" is hnyb=3 & lnyb=0 { tmp:1 = C || Z; export tmp; }
cc2: "cc" is hnyb=4 & lnyb=0 { tmp:1 = !C; export tmp; }
cc2: "cs" is hnyb=5 & lnyb=0 { tmp:1 = C; export tmp; }
cc2: "ne" is hnyb=6 & lnyb=0 { tmp:1 = !Z; export tmp; }
cc2: "eq" is hnyb=7 & lnyb=0 { tmp:1 = Z; export tmp; }
cc2: "vc" is hnyb=8 & lnyb=0 { tmp:1 = !V; export tmp; }
cc2: "vs" is hnyb=9 & lnyb=0 { tmp:1 = V; export tmp; }
cc2: "pl" is hnyb=10 & lnyb=0 { tmp:1 = !N; export tmp; }
cc2: "mi" is hnyb=11 & lnyb=0 { tmp:1 = N; export tmp; }
cc2: "ge" is hnyb=12 & lnyb=0 { tmp:1 = (V==N); export tmp; }
cc2: "lt" is hnyb=13 & lnyb=0 { tmp:1 = (V!=N); export tmp; }
cc2: "gt" is hnyb=14 & lnyb=0 { tmp:1 = !Z && (V==N); export tmp; }
cc2: "le" is hnyb=15 & lnyb=0 { tmp:1 = Z || (V!=N); export tmp; }


:add.w op_imm16,dst_r16 is op8=0x79; op4=1 & dst_r16; op_imm16 {
  addflags(dst_r16, op_imm16);
  dst_r16 = dst_r16 + op_imm16;
  resflags(dst_r16);
}
:add.l op_imm32,dst_r32 is op8=0x7A; op4=1 & dst_r32; op_imm32 {
  addflags(dst_r32, op_imm32);
  dst_r32 = dst_r32 + op_imm32;
  resflags(dst_r32);
}
:add.l src_r321,dst_r32 is op8=0x0A; src_r321 & dst_r32 {
  addflags(dst_r32, src_r321);
  dst_r32 = dst_r32 + src_r321;
  resflags(dst_r32);
}
:adds "#"4,dst_r3b is op8=0x0B; op4=9 & dst_r3b { dst_r3b = dst_r3b + 4; }

:and.w op_imm16,dst_r16 is op8=0x79; op4=6 & dst_r16; op_imm16 {
	dst_r16 = dst_r16 & op_imm16;
	movflags(dst_r16);
}
:and.w src_r16,dst_r16 is op8=0x66; src_r16 & dst_r16 {
	dst_r16 = dst_r16 & src_r16;
	movflags(dst_r16);
}
:and.l op_imm32,dst_r32 is op8=0x7A; op4=6 & dst_r32; op_imm32 {
	dst_r32 = dst_r32 & op_imm32;
	movflags(dst_r32);
}
:and.l src_r32,dst_r32 is op24=0x01F066; src_r32 & dst_r32 {
	dst_r32 = dst_r32 & src_r32;
	movflags(dst_r32);
}
:b^cc2 pcoff16 is op8=0x58; cc2; pcoff16 {
  if (cc2) goto pcoff16;
}

:bsr pcoff16 is op16=0x5C00; pcoff16 {
	pushpc();
	call pcoff16;
}

:cmp.w op_imm16,dst_r16 is op8=0x79; op4=2 & dst_r16; op_imm16 {
	subflags11(dst_r16, op_imm16);
	resflags(dst_r16-op_imm16);
}
:cmp.l op_imm32,dst_r32 is op8=0x7A; op4=2 & dst_r32; op_imm32 {
	subflags11(dst_r32, op_imm32);
	resflags(dst_r32-op_imm32);
}
:cmp.l src_r321,dst_r32 is op8=0x1F; src_r321 & dst_r32 {
	subflags11(dst_r32, src_r321);
	resflags(dst_r32-src_r321);
}
:dec.w "#"1,dst_r16 is op8=0x1B; hnyb=5 & dst_r16 {
	V = dst_r16 == 0x8000;
	dst_r16 = dst_r16 - 1;
	resflags(dst_r16);
}
:dec.w "#"2,dst_r16 is op8=0x1B; hnyb=0xD & dst_r16 {
	V = dst_r16 == 0x8000 | dst_r16 == 0x8001;
	dst_r16 = dst_r16 - 2;
	resflags(dst_r16);
}
:dec.l "#"1,dst_r32 is op8=0x1B; hnyb=7 & dst_r32 {
	V = dst_r32 == 0x80000000;
	dst_r32 = dst_r32 - 1;
	resflags(dst_r32);
}
:dec.l "#"2,dst_r32 is op8=0x1B; hnyb=0xF & dst_r32 {
	V = dst_r32 == 0x80000000 | dst_r32 == 0x80000001;
	dst_r32 = dst_r32 - 2;
	resflags(dst_r32);
}
:divxs.b src_r8,dst_r16 is op24=0x01D051; src_r8 & dst_r16 {
	local rem = dst_r16 s% sext(src_r8);
	local quot = dst_r16 s/ sext(src_r8);
	dst_r16 = rem << 8 | quot;
	resflags(src_r8);
}
:divxs.w src_r16,dst_r32 is op24=0x01D053; src_r16 & dst_r32 {
	local rem = dst_r32 s% sext(src_r16);
	local quot = dst_r32 s/ sext(src_r16);
	dst_r32 = rem << 16 | quot;
	resflags(src_r16);
}
:divxu.w src_r16,dst_r32 is op8=0x53; src_r16 & dst_r32 {
	local rem = dst_r32 % sext(src_r16);
	local quot = dst_r32 / sext(src_r16);
	dst_r32 = rem << 16 | quot;
	resflags(src_r16);
}
:eepmov.w is op16=0x7BD4; op16=0x598F {
	if (r4l != 0) goto <end>;
	<nextbyte>
	*:2 r6 = *:2 r5;
	er5 = er5 + 2;
	er6 = er6 + 2;
	r4 = r4 - 1;
	if (r4 != 0) goto <nextbyte>;
	<end>
}
:exts.w dst_r16 is op8=0x17; op4=0xD & dst_r16 {
  dst_r16 = sext(dst_r16:1);
  movflags(dst_r16);
}
:exts.l dst_r32 is op8=0x17; op4=0xF & dst_r32 {
  dst_r32 = sext(dst_r32:2);
  movflags(dst_r32);
}
:extu.w dst_r16 is op8=0x17; op4=0x5 & dst_r16 {
  dst_r16 = zext(dst_r16:1);
  movflags(dst_r16);
}
:extu.l dst_r32 is op8=0x17; op4=0x7 & dst_r32 {
  dst_r32 = zext(dst_r32:2);
  movflags(dst_r32);
}

:inc.w "#"1,dst_r16 is op8=0x0B; hnyb=5 & dst_r16 {
	V = dst_r16 == 0x7FFF;
	dst_r16 = dst_r16 + 1;
	resflags(dst_r16);
}
:inc.w "#"2,dst_r16 is op8=0x0B; hnyb=0xD & dst_r16 {
	V = dst_r16 == 0x7FFF | dst_r16 == 0x7FFE;
	dst_r16 = dst_r16 + 2;
	resflags(dst_r16);
}
:inc.l "#"1,dst_r32 is op8=0x0B; hnyb=7 & dst_r32 {
	V = dst_r32 == 0x80000000;
	dst_r32 = dst_r32 + 1;
	resflags(dst_r32);
}
:inc.l "#"2,dst_r32 is op8=0x0B; hnyb=0xF & dst_r32 {
	V = dst_r32 == 0x7FFFFFFF | dst_r32 == 0x7FFFFFFE;
	dst_r32 = dst_r32 + 2;
	resflags(dst_r32);
}

# TODO: jmp/jsr impl totally different for absolute address
:jmp absaddr24.w is op8=0x5A; absaddr24.w {
	goto absaddr24.w;
}
:jsr absaddr24.w is op8=0x5E; absaddr24.w {
	pushpc();
	call absaddr24.w;
}


:ldc.w @src_r32,"ccr" is op24=0x014069; src_r32 & lnyb=0 { ccr_w(*:1 src_r32:2); }
:ldc.w @(simm16,src_r32),"ccr" is op24=0x01406F; src_r32 & lnyb=0; simm16 { local tmp = src_r32 + simm16; ccr_w(*:1 tmp:2); }
:ldc.w @(imm24,src_r32),"ccr" is op24=0x014078; src_r32 & lnyb=0; op24=0x6B2000; imm24 { local tmp = src_r32 + imm24; ccr_w(*:1 tmp:2); }
:ldc.w @src_r32+,"ccr" is op24=0x01406D; src_r32 & lnyb=0 { ccr_w(*:1 src_r32:2); src_r32 = src_r32 + 2; }
:ldc.w absaddr16.w,"ccr" is op24=0x01406B; op8=0; absaddr16.w { ccr_w(absaddr16.w:1); }
:ldc.w absaddr24.w,"ccr" is op24=0x01406B; op16=0x2000; absaddr24.w { ccr_w(absaddr24.w:1); }
:mov.l src_r321,dst_r32 is op8=0x0F; src_r321 & dst_r32 { dst_r32 = src_r321; movflags(dst_r32); }
:mov.b @(imm24,src_r32),dst_r8 is op8=0x78; src_r32 & lnyb=0; op8=0x6A; op4=2 & dst_r8; op8=0; imm24 { local tmp = src_r32 + imm24; dst_r8 = *:1 tmp:2; movflags(dst_r8); }
:mov.b absaddr24.b,dst_r8 is op8=0x6A; op4=2 & dst_r8; op8=0; absaddr24.b { dst_r8 = absaddr24.b; movflags(dst_r8); }
:mov.w @(imm24,src_r32),dst_r16 is op8=0x78; src_r32 & lnyb=0; op8=0x6B; op4=2 & dst_r16; op8=0; imm24 { local tmp = src_r32 + imm24; dst_r16 = *:2 tmp:2; movflags(dst_r16); }
:mov.w absaddr24.w,dst_r16 is op8=0x6B; op4=2 & dst_r16; op8=0; absaddr24.w { dst_r16 = absaddr24.w; movflags(dst_r16); }
:mov.l op_imm32,dst_r32 is op8=0x7A; op4=0 & dst_r32; op_imm32 { dst_r32 = op_imm32; movflags(dst_r32); }
:mov.l @src_r32,dst_r32 is op24=0x010069; src_r32 & dst_r32 { dst_r32 = *:4 src_r32:2; movflags(dst_r32); }
:mov.l @(simm16,src_r32),dst_r32 is op24=0x01006F; src_r32 & dst_r32; simm16 { local tmp = src_r32 + simm16; dst_r32 = *:4 tmp:2; movflags(dst_r32); }
:mov.l @(imm24,src_r32),dst_r32 is op24=0x010078; src_r32 & lnyb=0; op8=0x6B; op4=2 & dst_r32; op8=0; imm24 { local tmp = src_r32 + imm24; dst_r32 = *:4 tmp:2; movflags(dst_r32); }
:mov.l @src_r32+,dst_r32 is op24=0x01006D; src_r32 & dst_r32 { dst_r32 = *:4 src_r32:2; src_r32 = src_r32 + 4; movflags(dst_r32); }
:mov.l absaddr16.l,dst_r32 is op24=0x01006B; op4=0 & dst_r32; absaddr16.l { dst_r32 = absaddr16.l; movflags(dst_r32); }
:mov.l absaddr24.l,dst_r32 is op24=0x01006B; op4=2 & dst_r32; op8=0; absaddr24.l { dst_r32 = absaddr24.l; movflags(dst_r32); }
:mov.b dst_r8,@(imm24,src_r32) is op8=0x78; src_r32 & lnyb=0; op8=0x6A; op4=0xA & dst_r8; op8=0; imm24 { local tmp = src_r32 + imm24; *:1 tmp:2 = dst_r8; movflags(dst_r8); }
:mov.b dst_r8,absaddr24.b is op8=0x6A; op4=0xA & dst_r8; op8=0; absaddr24.b { absaddr24.b = dst_r8; movflags(dst_r8); }
:mov.w dst_r16,@(imm24,src_r32) is op8=0x78; src_r32 & lnyb=0; op8=0x6B; op4=0xA & dst_r16; op8=0; imm24 { local tmp = src_r32 + imm24; *:2 tmp:2 = dst_r16; movflags(dst_r16); }
:mov.w dst_r16,absaddr24.w is op8=0x6B; op4=0xA & dst_r16; op8=0; absaddr24.w { absaddr24.w = dst_r16; movflags(dst_r16); }
:mov.l dst_r32,@src_r321 is op24=0x010069; src_r321 & dst_r32 { *:4 src_r321:2 = dst_r32; movflags(dst_r32); }
:mov.l dst_r32,@(simm16,src_r321) is op24=0x01006F; src_r321 & dst_r32; simm16 { local tmp = src_r321 + simm16; *:4 tmp:2 = dst_r32; movflags(dst_r32); }
:mov.l dst_r32,@(imm24,src_r321) is op24=0x010078; src_r321 & lnyb=0; op8=0x6B; op4=0xA & dst_r32; op8=0; imm24 { local tmp = src_r321 + imm24; *:4 tmp:2 = dst_r32; movflags(dst_r32); }
:mov.l dst_r32,@-src_r321 is op24=0x01006D; src_r321 & dst_r32 { src_r321 = src_r321 - 4; *:4 src_r321:2 = dst_r32; movflags(dst_r32); }
:mov.l dst_r32,absaddr16.l is op24=0x01006B; op4=8 & dst_r32; absaddr16.l { absaddr16.l = dst_r32; movflags(dst_r32); }
:mov.l dst_r32,absaddr24.l is op24=0x01006B; op4=0xA & dst_r32; op8=0; absaddr24.l { absaddr24.l = dst_r32; movflags(dst_r32); }

:mulxs.b src_r8,dst_r16 is op24=0x01C050; src_r8 & dst_r16 { dst_r16 = sext(src_r8) * (dst_r16 & 0xFF); resflags(dst_r16); }
:mulxs.w src_r16,dst_r32 is op24=0x01C052; src_r16 & dst_r32 { dst_r32 = sext(src_r16) * (dst_r32 & 0xFFFF); resflags(dst_r32); }
:mulxu.w src_r16,dst_r32 is op8=0x52; src_r16 & dst_r32 { dst_r32 = zext(dst_r32:2) * zext(src_r16); }
:neg.w dst_r16 is op8=0x17; op4=9 & dst_r16 { subflags11(0,dst_r16); dst_r16 = -dst_r16; resflags(dst_r16); }
:neg.l dst_r32 is op8=0x17; op4=0xB & dst_r32 { subflags11(0,dst_r32); dst_r32 = -dst_r32; resflags(dst_r32); }
:not.w dst_r16 is op8=0x17; op4=1 & dst_r16 { dst_r16 = ~dst_r16; movflags(dst_r16); }
:not.l dst_r32 is op8=0x17; op4=3 & dst_r32 { dst_r32 = ~dst_r32; movflags(dst_r32); }
:or.w op_imm16,dst_r16 is op8=0x79; op4=4 & dst_r16; op_imm16 {
	dst_r16 = dst_r16 | op_imm16;
	movflags(dst_r16);
}
:or.w src_r16,dst_r16 is op8=0x64; src_r16 & dst_r16 {
	dst_r16 = dst_r16 | src_r16;
	movflags(dst_r16);
}
:or.l op_imm32,dst_r32 is op8=0x7A; op4=4 & dst_r32; op_imm32 {
	dst_r32 = dst_r32 | op_imm32;
	movflags(dst_r32);
}
:or.l src_r32,dst_r32 is op24=0x01F064; src_r32 & dst_r32 {
	dst_r32 = dst_r32 | src_r32;
	movflags(dst_r32);
}

:pop.l dst_r32 is op24=0x01006D; op4=7 & dst_r32 {
#  dst_r32 = *$(SP):2; $(SP) = $(SP)+4; movflags(dst_r32);
}
:push.l dst_r32 is op24=0x01006D; op4=0xF & dst_r32 {
#  $(SP) = $(SP)-4; *$(SP):2 = dst_r32; movflags(dst_r32);
}
:rotl.w dst_r16 is op8=0x12; op4=9 & dst_r16 {
	local c = dst_r16 >> 15;
	dst_r16 = (dst_r16 << 1) | c;
	movflags(dst_r16);
	C = (c != 0);
}
:rotl.l dst_r32 is op8=0x12; op4=0xB & dst_r32 {
	local c = dst_r32 >> 31;
	dst_r32 = (dst_r32 << 1) | c;
	C = (c != 0);
	movflags(dst_r32);
}
:rotr.w dst_r16 is op8=0x13; op4=9 & dst_r16 {
	local c = dst_r16 & 1;
	dst_r16 = (c << 15) | (dst_r16 >> 1);
	C = (c != 0);
	movflags(dst_r16);
}
:rotr.l dst_r32 is op8=0x13; op4=0xB & dst_r32 {
	local c = dst_r32 & 1;
	dst_r32 = (c << 31) | (dst_r32 >> 1);
	C = (c != 0);
	movflags(dst_r32);
}
:rotxl.w dst_r16 is op8=0x12; op4=1 & dst_r16 {
	local c:2 = zext(C);
	C = (dst_r16 >> 15) != 0;
	dst_r16 = (dst_r16 << 1) | c;
	movflags(dst_r16);
}
:rotxl.l dst_r32 is op8=0x12; op4=3 & dst_r32 {
	local c:4 = zext(C);
	C = (dst_r32 >> 31) != 0;
	dst_r32 = (dst_r32 << 1) | c;
	movflags(dst_r32);
}
:rotxr.w dst_r16 is op8=0x13; op4=1 & dst_r16 {
	local c:2 = zext(C);
	C = (dst_r16 & 1) != 0;
	dst_r16 = (c << 15) | (dst_r16 >> 1);
	movflags(dst_r16);
}
:rotxr.l dst_r32 is op8=0x13; op4=3 & dst_r32 {
	local c:4 = zext(C);
	C = (dst_r32 & 1) != 0;
	dst_r32 = (c << 31) | (dst_r32 >> 1);
	movflags(dst_r32);
}

:shal.w dst_r16 is op8=0x10; op4=9 & dst_r16 {
	V = (dst_r16 & 0x8000) != 0;
	C = V;
	dst_r16 = dst_r16 << 1;
	resflags(dst_r16);
}
:shal.l dst_r32 is op8=0x10; op4=0xB & dst_r32 {
	V = (dst_r32 & 0x80000000) != 0;
	C = V;
	dst_r32 = dst_r32 << 1;
	resflags(dst_r32);
}
:shar.w dst_r16 is op8=0x11; op4=9 & dst_r16 {
	C = (dst_r16 & 1) != 0;
	dst_r16 = dst_r16 s>> 1;
	movflags(dst_r16);
}
:shar.l dst_r32 is op8=0x11; op4=0xB & dst_r32 {
	C = (dst_r32 & 1) != 0;
	dst_r32 = dst_r32 s>> 1;
	movflags(dst_r32);
}
:shll.w dst_r16 is op8=0x10; op4=1 & dst_r16 {
	C = (dst_r16 & 0x8000) != 0;
	dst_r16 = dst_r16 << 1;
	movflags(dst_r16);
}
:shll.l dst_r32 is op8=0x10; op4=3 & dst_r32 {
	C = (dst_r32 & 0x80000000) != 0;
	dst_r32 = dst_r32 << 1;
	movflags(dst_r32);
}
:shlr.w dst_r16 is op8=0x11; op4=1 & dst_r16 {
	C = (dst_r16 & 1) != 0;
	dst_r16 = dst_r16 >> 1;
	movflags(dst_r16);
}
:shlr.l dst_r32 is op8=0x11; op4=3 & dst_r32 {
	C = (dst_r32 & 1) != 0;
	dst_r32 = dst_r32 >> 1;
	movflags(dst_r32);
}
:stc.w "ccr",@src_r321 is op24=0x014069; src_r321 & lnyb=0 { local ccr; ccr_r(ccr); *:1 src_r321:2 = ccr; }
:stc.w "ccr",@(simm16,src_r321) is op24=0x01406F; src_r321 & lnyb=0; simm16 { local ccr; ccr_r(ccr); local dest = src_r321 + simm16; *:1 dest:2 = ccr; }
:stc.w "ccr",@(imm24,src_r32) is op24=0x014078; src_r32 & lnyb=0; op24=0x6BA000; imm24 { local ccr; ccr_r(ccr); local dest= src_r32 + imm24; *:1 dest:2 = ccr; }
:stc.w "ccr",@-src_r321 is op24=0x01406D; src_r321 & lnyb=0 { src_r321 = src_r321-2; local ccr; ccr_r(ccr); *:1 src_r321:2 = ccr; }
:stc.w "ccr",absaddr16.w is op24=0x01406B; op8=0x80; absaddr16.w { local ccr:1; ccr_r(ccr); absaddr16.w = zext(ccr); }
:stc.w "ccr",absaddr24.w is op24=0x01406B; op16=0xA000; absaddr24.w { local ccr:1; ccr_r(ccr); absaddr24.w = zext(ccr); }

:sub.w op_imm16,dst_r16 is op8=0x79; op4=3 & dst_r16; op_imm16 {
  subflags11(dst_r16,op_imm16);
  dst_r16 = dst_r16 - op_imm16;
  resflags(dst_r16);
}
:sub.l op_imm32,dst_r32 is op8=0x7A; op4=3 & dst_r32; op_imm32 {
  subflags27(dst_r32, op_imm32);
  dst_r32 = dst_r32 - op_imm32;
  resflags(dst_r32);
}
:sub.l src_r321,dst_r32 is op8=0x1A; src_r321 & dst_r32 {
  subflags27(dst_r32, src_r321);
  dst_r32 = dst_r32 - src_r321;
  resflags(dst_r32);
}
:subs "#"4,dst_r32 is op8=0x1B; op4=9 & dst_r32 { dst_r32 = dst_r32 - 4; }

:xor.w op_imm16,dst_r16 is op8=0x79; op4=0x5 & dst_r16; op_imm16 { dst_r16 = dst_r16 ^ op_imm16; movflags(dst_r16); }
:xor.w src_r16,dst_r16 is op8=0x65; src_r16 & dst_r16 { dst_r16 = dst_r16^ src_r16; movflags(dst_r16); }
:xor.l op_imm32,dst_r32 is op8=0x7A; op4=0x5 & dst_r32; op_imm32 { dst_r32 = dst_r32 ^ op_imm32; movflags(dst_r32); }
:xor.l src_r32,dst_r32 is op24=0x01F065; src_r32 & dst_r32 { dst_r32 = dst_r32 ^ src_r32; movflags(dst_r32); }

:trapa "#"trapn is op8=0x57; b67=0 & trapn & lnyb=0 {
  pushpcccr();
  I = 1;
  # vec:3 = *:2 0x10 + (trapn * 2);
  # vec = vec << 1;
  # call [vec];
}
